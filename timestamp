# Import the required libraries
import requests
import json
import os

# Set the _U cookie value from Bing
# You can get this by logging in to Bing and inspecting the cookies
# See https://pypi.org/project/sydney-py/ for more details
os.environ["BING_U_COOKIE"] = "<your-cookie>"

# Set the base URL for the Bing Chat API
base_url = "https://www.bing.com/api/chat/v1"

# Create a session object to store the cookies
session = requests.Session()

# Start a conversation with Bing Chat
start_url = base_url + "/start"
start_data = {"style": "balanced"} # You can change the style to creative or precise
start_response = session.post(start_url, data=start_data)
start_json = start_response.json()

# Get the conversation ID and token from the response
conversation_id = start_json["conversationId"]
token = start_json["token"]

# Create an empty list to store the messages
messages = []

# Define a function to send a message to Bing Chat and get a response
def send_message(prompt):
    # Set the headers for the request
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    # Set the data for the request
    data = {
        "conversationId": conversation_id,
        "prompt": prompt,
        "isUser": True,
        "messageId": len(messages) + 1 # Increment the message ID by 1 for each message
    }

    # Send a POST request to the ask endpoint
    ask_url = base_url + "/ask"
    ask_response = session.post(ask_url, headers=headers, data=json.dumps(data))
    ask_json = ask_response.json()

    # Get the response from Bing Chat
    response = ask_json["response"]

    # Return the response as a string
    return response

# Define a function to save the messages to a file
def save_messages(filename):
    # Open a file in write mode
    with open(filename, "w") as f:
        # Write each message as a line in JSON format
        for message in messages:
            f.write(json.dumps(message) + "\n")

# Define a function to end the conversation with Bing Chat
def end_conversation():
    # Set the headers for the request
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    # Set the data for the request
    data = {
        "conversationId": conversation_id,
        "isUser": False,
        "messageId": len(messages) + 1 # Increment the message ID by 1 for each message
    }

    # Send a POST request to the end endpoint
    end_url = base_url + "/end"
    end_response = session.post(end_url, headers=headers, data=json.dumps(data))
    end_json = end_response.json()

    # Get the status from the response
    status = end_json["status"]

    # Return the status as a string
    return status

# Define a loop to interact with Bing Chat until exit or reset command is entered
while True:
    # Get the user input as a prompt
    prompt = input("You: ")

    # Check if the prompt is an exit command
    if prompt == "!exit":
        # End the conversation with Bing Chat
        status = end_conversation()
        print(f"Bing: {status}")

        # Save the messages to a file named bing_chat.txt
        save_messages("bing_chat.txt")
        print("Messages saved to bing_chat.txt")

        # Break out of the loop
        break

    # Check if the prompt is a reset command
    elif prompt == "!reset":
        # End the current conversation with Bing Chat
        status = end_conversation()
        print(f"Bing: {status}")

        # Save the messages to a file named bing_chat_<conversation_id>.txt
        save_messages(f"bing_chat_{conversation_id}.txt")
        print(f"Messages saved to bing_chat_{conversation_id}.txt")

        # Start a new conversation with Bing Chat with the same style as before
        start_data["style"] = start_json["style"]
        start_response = session.post(start_url, data=start_data)
        start_json = start_response.json()

        # Update the conversation ID and token from the response
        conversation_id = start_json["conversationId"]
        token = start_json["token"]

        # Clear the messages list
        messages = []

    # Otherwise, send the prompt to Bing Chat and get a response
    else:
        # Send the prompt to Bing Chat
        response = send_message(prompt)

        # Print the response
        print(f"Bing: {response}")

        # Append the prompt and response to the messages list as dictionaries
        messages.append({
            "username": "You",
            "message": prompt,
            "timestamp": start_json["timestamp"]
        })
        messages.append({
            "username": "Bing",
            "message": response,
            "timestamp": start_json["timestamp"]
        })
